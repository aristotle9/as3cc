/** 正则表达式分析 **/

%lex

%class      RegexLexer
%field      package %{package    org.lala.lex.utils.parser;
%}
%field      output_type  %{rust%}

%{
use std::char;
%}

%x          BRACKET REPEAT

%%

\*                                      return "*"
\+                                      return "+"
\?                                      return "?"
\|                                      return "|"
\(                                      return "("
\)                                      return ")"

\[                                      self.begin("BRACKET"); return "["
<BRACKET>\^                             return "^"
<BRACKET>\-                             return "-"
<BRACKET>\]                             self.begin("INITIAL"); return "]"

\{                                      self.begin("REPEAT"); return "{"
<REPEAT>,                               return ","
<REPEAT>\d+                             { let u = u64::from_str_radix(self.get_yytext().as_string().unwrap(), 10).unwrap(); self.set_yytext(Json::U64(u)); } return "d"
<REPEAT>[ \t]+                          /* skip */
<REPEAT>\}                              self.begin("INITIAL"); return "}"

<INITIAL BRACKET>\\0[0-7]{2}            { let u = u32::from_str_radix(&self.get_yytext().as_string().unwrap()[2 .. 4], 8).unwrap(); self.set_yytext(Json::String(char::from_u32(u).unwrap().to_string())); } return "c"
<INITIAL BRACKET>\\x[\da-fA-F]{2}       { let u = u32::from_str_radix(&self.get_yytext().as_string().unwrap()[2 .. 4], 16).unwrap(); self.set_yytext(Json::String(char::from_u32(u).unwrap().to_string())); } return "c"
<INITIAL BRACKET>\\u[\da-fA-F]{4}       { let u = u32::from_str_radix(&self.get_yytext().as_string().unwrap()[2 .. 6], 16).unwrap(); self.set_yytext(Json::String(char::from_u32(u).unwrap().to_string())); } return "c"
<INITIAL BRACKET>\\[dsw]|\.             return "escc"
<INITIAL BRACKET>\\r                    self.set_yytext(Json::String("\r".to_string())); return "c"
<INITIAL BRACKET>\\n                    self.set_yytext(Json::String("\n".to_string())); return "c"
<INITIAL BRACKET>\\t                    self.set_yytext(Json::String("\t".to_string())); return "c"
<INITIAL BRACKET>\\b                    self.set_yytext(Json::String("\x08".to_string())); return "c"
<INITIAL BRACKET>\\f                    self.set_yytext(Json::String("\x0C".to_string())); return "c"
<INITIAL BRACKET>\\/                    self.set_yytext(Json::String("/".to_string())); return "c"
<INITIAL BRACKET>\\c                    return "escc"
<INITIAL BRACKET>\\.                    { let s = self.get_yytext(); self.set_yytext(Json::String(s.as_string().unwrap()[1 ..].to_string())); } return "c"
<INITIAL BRACKET>/                      return "/"
<INITIAL BRACKET>.                      return "c"

/lex
%class          RegexParser
%lexer_name     RegexLexer
%field      package %{package    org.lala.lex.utils.parser;
%}
%field      output_type  %{rust%}

%initial %{
let mut codes: Vec<Json> = Vec::new();
let mut flags: Vec<Json> = Vec::new();
%}

%left   '|'
%left   escc c cat '(' '['
%left   '-'
%left   '*' '?' '+' '{'
%left   ')' ']'

%%
RegExp
        : R { $$ = Some(Json::Array(codes.clone())); }
        | '/' R '/' Flags {
            for _ in 0..flags.len() {
                codes.pop();
            }
            $$ = Some(Json::Array(codes.clone()));
        }
        ;
Flags
        : Flags C
            {
                let flags_c = $2;
                if flags.contains(&flags_c) {
                    return Err(lexer.new_lexer_error("Flag Repeated".to_string()))
                }
                if "igm".find(flags_c.as_string().unwrap()).is_none() {
                    return Err(lexer.new_lexer_error("Unknow Flag".to_string()))
                }
                flags.push(flags_c);
            }
        |
        ;
R
        :R '|' R     { codes.push(Json::String("or".to_string())); }
        |'(' R ')'
        |R Rp   %prec '*'
        |R '*'  { codes.push(Json::String("star".to_string())); }
        |R '+'  { codes.push(Json::String("more".to_string())); }
        |R '?'  { codes.push(Json::String("ask".to_string()));  }
        |'[' IR ']'     { codes.push(Json::Array(vec![Json::String("include".to_string()), $2])); }
        |'[' '^' IR ']' { codes.push(Json::Array(vec![Json::String("exclude".to_string()), $3])); }
        |R R    %prec cat   { codes.push(Json::String("cat".to_string())); }
        |C  { codes.push(Json::String("single".to_string())); }
        ;

Rp
        :'{' d '}'   {
                        let n: u64 = $2.as_u64().unwrap() - 1;
                        for _ in 0..n {
                            codes.push(Json::String("dupl".to_string()));
                        }
                        for _ in 0..n {
                            codes.push(Json::String("cat".to_string()));
                        }
                    }
        |'{' ',' d '}'  {
                            codes.push(Json::String("ask".to_string()));
                            let n: u64 = $3.as_u64().unwrap() - 1;
                            for _ in 0..n {
                                codes.push(Json::String("dupl".to_string()));
                            }
                            for _ in 0..n {
                                codes.push(Json::String("cat".to_string()));
                            }
                        }
        |'{' d ',' d '}'    {/*
                                if((Integer)$2 > (Integer)$4)
                                {
                                    _$i = (Integer)$2;
                                    $2 = $4;
                                    $4 = _$i;
                                }*/
                                let mut n: u64 = $2.as_u64().unwrap() - 1;
                                for _ in 0..n {
                                    codes.push(Json::String("dupl".to_string()));
                                }
                                n = $4.as_u64().unwrap() - n;
                                if n > 0 {
                                    codes.push(Json::String("dupl".to_string()));
                                    codes.push(Json::String("ask".to_string()));
                                    for _ in 0..n {
                                        codes.push(Json::String("dupl".to_string()));
                                    }
                                }
                                n = $4.as_u64().unwrap() - 1;
                                for _ in 0..n {
                                    codes.push(Json::String("cat".to_string()));
                                }
                            }
        |'{' d ',' '}'      {
                                let n: u64 = $2.as_u64().unwrap();
                                for _ in 0..n {
                                    codes.push(Json::String("dupl".to_string()));
                                }
                                codes.push(Json::String("star".to_string()));
                                for _ in 0..n {
                                    codes.push(Json::String("cat".to_string()));
                                }
                            }
        ;

IR
        :IR c '-' c      { $$ = Some(Json::U64($1.as_u64().unwrap() + 1)); codes.push(Json::Array(vec![Json::String("c".to_string()), $2])); codes.push(Json::Array(vec![Json::String("c".to_string()), $4])); codes.push(Json::String("range".to_string())); }
        |IR C           { $$ = Some(Json::U64($1.as_u64().unwrap() + 1)); codes.push(Json::String("single".to_string())); }
        |C              { codes.push(Json::String("single".to_string())); $$ = Some(Json::U64(1)); }
        |c '-' c        { codes.push(Json::Array(vec![Json::String("c".to_string()), $1])); codes.push(Json::Array(vec![Json::String("c".to_string()), $3])); codes.push(Json::String("range".to_string())); $$ = Some(Json::U64(1)); }
        ;

C
        :c               { codes.push(Json::Array(vec![Json::String("c".to_string()), $1])); }
        |escc
            {
                if $1.as_string().unwrap() == "\\c" {
                    return Err(lexer.new_lexer_error("Control Character".to_string()));
                }
                codes.push(Json::Array(vec![Json::String("escc".to_string()), $1]));
            }
        ;
