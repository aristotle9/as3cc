/** nico脚本 **/
/**
语法撰写:aristotle9
**/

%lex
%package org.lala.niwan.parser
%class  Lexer
%{
    private function escapeText(str:String):String
    {
        return str.replace(/\\(.)/g, function(...args):String
        {
            switch(args[1])
            {
                case 't':
                    return '\t';
                case 'n':
                    return '\n';
                case 'r':
                    return '\r';
                case 'f':
                    return '\f';
                default:
                    return args[1];
            }
            return args[1];
        });
    }
%}
%%

\s+                                     /** skip **/
(//|#)[^\r\n]*[\r\n]*                   /** skip **/
/\*([^\*]+\*|\*)([^\*/][^\*]*\*|\*)*/   /** skip **/


true                                    $$ = true; return 'bool'
false                                   $$ = false; return 'bool'
null                                    $$ = null; return 'string'
[1-9]\d*|0                              $$ = parseInt($$); return 'number'
0[0-7]+                                 $$ = parseInt($$, 8); return 'number'
\d*\.\d+                                $$ = parseFloat($$); return 'number'
(\d+(\.\d+)?|\.\d+)([eE][+\-]?\d+)?     $$ = parseFloat($$); return 'number'
0[xX][\da-fA-F]+                        $$ = parseInt($$, 16); return 'number'
[a-zA-Z_$@][\w_$@]*                     return 'id'
'([^'\\]|\\.)*'|"([^"\\]|\\.)*"         $$ = $$.substr(1, yyleng - 2); $$ = escapeText($$); return 'string'

,                                       return ','
;                                       return ';'
\\                                      return '\\'
:                                       return ':'
=                                       return '='
:=                                      return ':='
+=                                      return '+='
-=                                      return '-='
*=                                      return '*='
/=                                      return '/='
%=                                      return '%='
&&=                                     return '&&='
|\|=                                    return '||='
>>=                                     return '>>='
\<<=                                    return '<<='
>>>=                                    return '>>>='
|=                                      return '|='
&=                                      return '&='
^=                                      return '^='
?                                       return '?'
|\|                                     return '||'
&&                                      return '&&'
|                                       return '|'
^                                       return '^'
&                                       return '&'
==                                      return '=='
!=                                      return '!='
\<=                                     return '<='
>=                                      return '>='
\<                                      return '<'
>                                       return '>'
\<>                                     return '<>'
\<<                                     return '<<'
>>                                      return '>>'
>>>                                     return '>>>'
+                                       return '+'
-                                       return '-'
*                                       return '*'
/                                       return '/'
%                                       return '%'
~                                       return '~'
!                                       return '!'
*\*                                     return '**'
+\+                                     return '++'
--                                      return '--'
\(                                      return '('
)                                       return ')'
\.                                      return '.'
\[                                      return '['
]                                       return ']'
\{                                      return '{'
}                                       return '}'

/lex

%package org.lala.niwan.parser
%class  Parser
%lexer_name Lexer

/** 类型系统,用于推断表示 **/
%import org.lala.niwan.types.TypeClass
/** 结点类 **/
%import org.lala.niwan.ast.Node

%right  PROGPROF
%left   ','
%left   ';'
%right  LAMBDA
%left   ':'
%right  '=' ':=' '+=' '-=' '*=' '/=' '%=' '>>=' '<<=' '>>>=' '|=' '&=' '^='
%left   '||'
%left   '&&'
%left   '|'
%left   '^'
%left   '&'
%left   '==' '!=' '<=' '>=' '<' '>' '<>'
%left   '<<' '>>' '>>>'
%left   '+' '-'
%left   '*' '/' '%'
%left   '~' '!'
%left   '**'
%left   '++' '--'
%left  '(' '.' '[' '{' ')' ']' '}'

%start  Program

%initial %{
    var type:TypeClass;
%}

%%
/** 
    根据解析实践测试表明,有以下几个语法未实现:
    拉姆达表达式中的逗号分隔: \(a=0,b=a+1)
    空分号: ;i+=1;;b+=i;
    一种默认参数形式: f(,,,4,,,6)
    表达式参数的一种写法def('f',(a+b,c+d))//使用括号将逗号表达式作为一个表达式参数
    空的点号表达式 .i.y = 90;

todo:
    直接添加这些语法导致RR冲突
    可以考虑实现两种表达式序列:
    一种可以用逗号分隔,普遍的表达式序列
    一种是在参数中使用,不能用逗号分隔
    修补一些语法:
    '.' id = id
**/
Program     
            :'/' ExprsWithCommas  %prec PROGPROF
                {
                    $$ = new Node('program', $2.type, $2);
                }
            ;

ExprsWithCommas
            :ExprsWithCommas ',' Exprs
                {
                    $$ = $1;
                    $$.nodes = $$.nodes.concat($3.nodes);
                    $$.type = $3.type;
                }
            |ExprsWithCommas ','
            |Exprs %prec ','
            |',' Exprs
                {
                    $$ = $2
                }
            |','
                {
                    $$ = new Node('exprs', TypeClass.UnitType);
                }
            ;

Exprs        /** block **//** 无逗号表达式序列,可以是空分号 **/
            :Exprs ';' E
                {
                    $$ = $1;
                    $$.nodes.push($3)
                    $$.type = $3.type
                }
            |Exprs ';'
            |'(' ExprsWithCommas ')'
                {
                    $$ = $2
                }
            |E %prec ';'
                {
                    $$ = new Node('exprs', $1.type, $1);
                }
            |';' E
                {
                    $$ = new Node('exprs', $2.type, $2);
                }
            |';'
                {
                    $$ = new Node('exprs', TypeClass.UnitType);
                }
            ;
            
E        
            :E '+' E
                {
                    if($1.type == TypeClass.StringType)
                    {
                        type = TypeClass.StringType;
                    }
                    else
                    {
                        type = TypeClass.NumberType
                    }
                    $$ = new Node('additive', type, $1, $3);
                    $$.attri = '+'
                }
            |E '-' E
                {
                    $$ = new Node('additive', TypeClass.NumberType, $1, $3);
                    $$.attri = '-'
                }
            |E '*' E
                {
                    $$ = new Node('multiplicative', TypeClass.NumberType, $1, $3);
                    $$.attri = '*'
                }
            |E '/' E
                {
                    $$ = new Node('multiplicative', TypeClass.NumberType, $1, $3);
                    $$.attri = '/'
                }
            |E '%' E
                {
                    $$ = new Node('multiplicative', TypeClass.NumberType, $1, $3);
                    $$.attri = '%'
                }
            |E RelOp E %prec '=='
                {
                    $$ = new Node('relational', TypeClass.BooleanType, $1, $3);
                    $$.attri = $2
                }
            |E BitShiftOp E %prec '<<'
                {
                    $$ = new Node('bitshift', TypeClass.NumberType, $1, $3);
                    $$.attri = $2
                }
            |E '||' E
                {
                    $$ = new Node('logical', TypeClass.BooleanType, $1, $3);
                    $$.attri = '||'
                }
            |E '&&' E
                {
                    $$ = new Node('logical', TypeClass.BooleanType, $1, $3);
                    $$.attri = '&&'
                }
            |E '|' E
                {
                    $$ = new Node('bitwise', TypeClass.NumberType, $1, $3);
                    $$.attri = '|'
                }
            |E '^' E
                {
                    $$ = new Node('bitwise', TypeClass.NumberType, $1, $3);
                    $$.attri = '^'
                }
            |E '&' E
                {
                    $$ = new Node('bitwise', TypeClass.NumberType, $1, $3);
                    $$.attri = '&'
                }
            |E '**' E
                {
                    $$ = new Node('power', TypeClass.NumberType, $1, $3);
                    $$.attri = '**'
                }
            |'\' ExprsWithCommas %prec LAMBDA
                {
                    $$ = new Node('lambda', TypeClass.LambdaType, $2);
                }
            |E '++'
                {
                    $$ = new Node('unary_assignment', TypeClass.NumberType, $1);
                    $$.attri = 'f++'
                }
            |E '--'
                {
                    $$ = new Node('unary_assignment', TypeClass.NumberType, $1);
                    $$.attri = 'f--'
                }
            |'++' E
                {
                    $$ = new Node('unary_assignment', TypeClass.NumberType, $2);
                    $$.attri = '++f'
                }
            |'--' E
                {
                    $$ = new Node('unary_assignment', TypeClass.NumberType, $2);
                    $$.attri = '--f'
                }
            |'+' E %prec '!'
                {
                    $$ = new Node('prefix_unary', TypeClass.NumberType, $2);
                    $$.attri = '+f'
                }
            |'-' E %prec '!'
                {
                    $$ = new Node('prefix_unary', TypeClass.NumberType, $2);
                    $$.attri = '-f'
                }
            |'!' E
                {
                    $$ = new Node('prefix_unary', TypeClass.BooleanType, $2);
                    $$.attri = '!f'
                }
            |'~' E
                {
                    $$ = new Node('prefix_unary', TypeClass.NumberType, $2);
                    $$.attri = '~f'
                }
            |'(' E ')'
                {
                    $$ = $2
                }
            |E '.' id
                {
                    $$ = new Node('dot', TypeClass.AnyType, $1);
                    $$.attri = $3
                }
            |E AssignOP E %prec '='
                {
                    $$ = new Node('assignment', $3.type, $1, $3);
                    $$.attri = $2
                }
            |IndexCall
            |FunctionCall
            |Primary
            ;
            
Primary       
            :number
                {
                    $$ = new Node('number', TypeClass.NumberType);
                    $$.attri = $1
                }
            |bool
                {
                    $$ = new Node('bool', TypeClass.BooleanType);
                    $$.attri = $1
                }
            |string
                {
                    $$ = new Node('string', TypeClass.StringType);
                    $$.attri = $1
                }
            |id
                {
                    $$ = new Node('id');
                    $$.attri = $1
                }
            |'.' id
                {
                    $$ = new Node('id');
                    $$.attri = $2
                }            
            |Array
            |Object
            ;

Array
            :'[' ArrayList ']'
                {
                    $$ = new Node('array', TypeClass.ArrayType);
                    $$.attri = $2
                }
            ;
            
ArrayList   
            : ArrayList ',' E
                {
                    $$ = $1
                    $$.attri.push($3)
                }
            |E
                {
                    $$ = new Node('array_list');
                    $$.attri = [$1]
                }
            |
                {
                    $$ = new Node('array_list');
                    $$.attri = []
                }
            ;
            
Object      
            :'{' ObjectList '}'
                {
                    $$ = new Node('object', TypeClass.ObjectType);
                    $$.attri = $2
                }
            ;
            
ObjectList
            :ObjectList ',' Name ':' E
                {
                    $$ = $1
                    $$.attri.push({name:$3, value:$5})
                }
            |Name ':' E
                {
                    $$ = new Node('object_list');
                    $$.attri = [{name:$1, value:$3}]
                }
            |
                {
                    $$ = new Node('object_list');
                    $$.attri = []
                }
            ;

Name
            :id
            |string
            |number
            ;
            
IndexCall /** 因为[]可以是index,也可以是lambda call **/
            :E Array
                {
                    $$ = new Node('index', TypeClass.AnyType, $1, $2);
                }
            ;

FunctionCall
            :E '(' Args ')'
                {
                    $$ = new Node('call', TypeClass.AnyType, $1, $3);
                }
            |E '(' ')'
                {
                    $$ = new Node('args');
                    $$.attri = [];
                    $$ = new Node('call', TypeClass.AnyType, $1, $$);
                }
            ;
            
Args        
            :Args ',' Name ':' Exprs
                {
                    $$ = $1
                    $$.attri.push([$3, $5])
                }
            |Args ',' Exprs
                {
                    $$ = $1
                    $$.attri.push([$3])
                }
            |Args ','
                {
                    $$ = $1
                    $$.attri.push([])
                }
            |Name ':' Exprs  
                {
                    $$ = new Node('args');
                    $$.attri = [[$1, $3]]
                }
            |Exprs  
                {
                    $$ = new Node('args');
                    $$.attri = [[$1]]
                }
            |',' Name ':' Exprs
                {
                    $$ = new Node('args');
                    $$.attri= [[], [$2, $4]]
                }
            |',' Exprs
                {
                    $$ = new Node('args');
                    $$.attri= [[], [$2]]
                }
            |','
                {
                    $$ = new Node('args');
                    $$.attri = [[],[]]
                }
            ;
            
RelOp       
            :'=='
            |'!='
            |'<='
            |'>='
            |'<'
            |'>'
            |'<>'
            ;
            
AssignOP
            :'='
            |':='
            |'+='
            |'-='
            |'*='
            |'/='
            |'%='
            |'>>='
            |'<<='
            |'>>>='
            |'|='
            |'&='
            |'^='
            ;
            
BitShiftOp
            :'<<'
            |'>>'
            |'>>>'
            ;