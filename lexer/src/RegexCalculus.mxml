<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
    xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:editor="org.lala.ui.editor.*" 
	layout="absolute" minWidth="300" minHeight="200"
	creationComplete="application1_creationCompleteHandler(event)" creationPolicy="all"
	backgroundColor="#FFFFFF">
    <mx:Metadata>
        [SWF(width="750",height="525")]
    </mx:Metadata>
    <mx:Script>
        <![CDATA[
            import com.maccherone.json.JSON;
            
            import mx.events.FlexEvent;
            import mx.utils.StringUtil;
            
            import org.lala.lex.configs.LexConfig;
            import org.lala.lex.interfaces.IInput;
            import org.lala.lex.interfaces.IInputSet;
            import org.lala.lex.interfaces.INFA;
            import org.lala.lex.nfa.InputSet;
            import org.lala.lex.utils.CFileGenerator;
            import org.lala.lex.utils.LexerGenerator;
            import org.lala.lex.utils.NFAUtil;
            import org.lala.lex.utils.RegToken;
            import org.lala.lex.utils.RegexUtil;
            import org.lala.lex.utils.RegexpMachine002;
            import org.lala.lex.utils.TplRender;
            import org.lala.lex.utils.parser.RegexParser;
            
            private var lexerGenerator:LexerGenerator;
/*             protected function execBt_clickHandler(event:MouseEvent):void
            {
                log(RegexUtil.lex_with_extends(inputText.text));
            } */
            
            protected function log(... args):void
            {
                outputText.text += args.join("") + "\n";
            }

/*             protected function shuntBt_clickHandler(event:MouseEvent):void
            {
                log(RegexUtil.shunting_yard(RegexUtil.lex_with_extends(inputText.text)));
            } */

            protected function nfaBt_clickHandler(event:MouseEvent):void
            {
//                var tokens:Vector.<RegToken> = RegexUtil.lex_with_extends(inputText.text);
//                var rpn:Vector.<RegToken> = RegexUtil.shunting_yard(tokens);
//                var nfa:INFA = RegexUtil.reg_nfa(rpn);
                var parser:RegexParser = new RegexParser;
                var res:Object = parser.parse(inputText.text); 
                var regMachine:RegexpMachine002 = new RegexpMachine002();
                regMachine.code = res.code;
                var nfa:INFA = regMachine.execute();
                
                NFAUtil.reindex_nfa(nfa);
                log(RegexUtil.nfa_dot(nfa));
            }

            protected function clsBt_clickHandler(event:MouseEvent):void
            {
                outputText.text = "";
            }

            protected function dfaBt_clickHandler(event:MouseEvent):void
            {
//                var tokens:Vector.<RegToken> = RegexUtil.lex_with_extends(inputText.text);
//                var rpn:Vector.<RegToken> = RegexUtil.shunting_yard(tokens);
//                var nfa:INFA = RegexUtil.reg_nfa(rpn);
                var parser:RegexParser = new RegexParser;
                var res:Object = parser.parse(inputText.text); 
                var regMachine:RegexpMachine002 = new RegexpMachine002();
                regMachine.code = res.code;
                var nfa:INFA = regMachine.execute();
                
                NFAUtil.reindex_nfa(nfa);
                nfa = NFAUtil.subset_construction(nfa);
                log(RegexUtil.dfa_of_nfa_dot(nfa));
            }

            protected function minidfaBt_clickHandler(event:MouseEvent):void
            {
//                var tokens:Vector.<RegToken> = RegexUtil.lex_with_extends(inputText.text);
//                var rpn:Vector.<RegToken> = RegexUtil.shunting_yard(tokens);
//                var nfa:INFA = RegexUtil.reg_nfa(rpn);
                var parser:RegexParser = new RegexParser;
                var res:Object = parser.parse(inputText.text); 
                var regMachine:RegexpMachine002 = new RegexpMachine002();
                regMachine.code = res.code;
                var nfa:INFA = regMachine.execute();
                
                NFAUtil.reindex_nfa(nfa);
                nfa = NFAUtil.subset_construction(nfa);
                nfa = NFAUtil.min_dfa(nfa);
                log(RegexUtil.nfa_dot(nfa));
            }
            
            protected function loadFileBt_clickHandler(event:MouseEvent):void
            {
                var fileRef:FileReference = new FileReference();
                fileRef.addEventListener(Event.SELECT, function(event:Event):void
                {
                    fileRef.load();
                });
                fileRef.addEventListener(Event.COMPLETE, function(event:Event):void
                {
//                    var config:Object = RegexUtil.PARSE_LEXER_SOURCE(new XML(fileRef.data));
                    var config:Object = (new LexConfig(String(fileRef.data))).data;
                    lexerGenerator = new LexerGenerator(config);
                    lexerGenerator.generate();
                    testOutputText.text += "ok.\n";
                });
                fileRef.browse([new FileFilter("lpc","*.lpc")]);
            }

            protected function saveFileBt_clickHandler(event:MouseEvent):void
            {
                var fileRef:FileReference = new FileReference();
                fileRef.save(lexerGenerator.tableBytes, "lexerData.dat");
            }

            protected function saveActionBt_clickHandler(event:MouseEvent):void
            {
                var fileRef:FileReference = new FileReference;
                fileRef.save(lexerGenerator.actionString, "lexerActions.txt");
            }

            protected function application1_creationCompleteHandler(event:FlexEvent):void
            {
                viewChanges.selectedIndex = 0;
            }

            protected function lexdfaBt_clickHandler(event:MouseEvent):void
            {
                if(lexerGenerator != null)
                    log(lexerGenerator.dotString);
            }

            protected function compileBt_clickHandler(event:MouseEvent):void
            {
                var parser:RegexParser = new RegexParser;
                var res:Object = parser.parse(inputText.text); 
//                log(res.tree);
                log(JSON.encode(res.code,true));
                log(JSON.encode(res.error,true));
            }

            protected function saveRawTableBt_clickHandler(event:MouseEvent):void
            {
				var fRef:FileReference = new FileReference();
                var result:Object = lexerGenerator.saveLexerFile();
				fRef.save(result.data, result.name);
            }

            protected function saveHtmlBt_clickHandler(event:MouseEvent):void
            {
                var fileRef:FileReference = new FileReference;
                fileRef.save(testInputText.exportAsHtml(), "code.html");
            }

            protected function cLangTablesBt_clickHandler(event:MouseEvent):void
            {
//                var cg:CFileGenerator = new CFileGenerator(lexerGenerator.tableBytes);
//                trace(cg.getInputArray());
//                trace(cg.getStates());
				trace(lexerGenerator.javaTableString);
				trace(lexerGenerator.actionString);
            }

        ]]>
    </mx:Script>
    <mx:VBox width="100%" height="100%" verticalGap="0">
        <mx:HBox width="100%" height="25" horizontalAlign="center" verticalAlign="middle" backgroundColor="#206BA4">
            <mx:ButtonBar id="viewChanges">
                <mx:dataProvider>
                    <mx:Array>
                        <mx:String>LexerGenerator</mx:String>
                        <mx:String>RegularExpression</mx:String>
                    </mx:Array>
                </mx:dataProvider>                
            </mx:ButtonBar>
        </mx:HBox>
        <mx:ViewStack id="viewPanels" selectedIndex="{viewChanges.selectedIndex}" width="100%" height="100%" backgroundColor="#BEDF5D">
            <mx:VBox width="100%" height="100%">
                <mx:HBox width="100%" height="30" verticalAlign="middle" horizontalAlign="center">
                    <mx:Button id="loadFileBt" label="LoadConfig" click="loadFileBt_clickHandler(event)"/>
                    <mx:Button id="saveFileBt" label="SaveTable" click="saveFileBt_clickHandler(event)"/>
                    <mx:Button id="saveActionBt" label="SaveAction" click="saveActionBt_clickHandler(event)"/>
                    <mx:Button id="saveRawTableBt" label="SingleFile" click="saveRawTableBt_clickHandler(event)"/>
                    <mx:Button id="cLangTablesBt" label="CTables" click="cLangTablesBt_clickHandler(event)"/>
                    <mx:Button id="saveHtmlBt" label="ExportHTML" click="saveHtmlBt_clickHandler(event)"/>
                    <mx:Button label="CleanLog" id="testCleanBt" click="testOutputText.text=''"/>    
                </mx:HBox>
                <editor:HighlightEditor id="testInputText" height="85%" width="100%">
                </editor:HighlightEditor>
                <mx:TextArea id="testOutputText" height="15%" width="100%" backgroundColor="#FAF6E2" fontFamily="Consolas" fontSize="12" editable="false" borderThickness="1" color="#003344" borderColor="#B7BABC">
                </mx:TextArea>
            </mx:VBox>
            <mx:VBox width="100%" height="100%">
                <mx:TextArea id="outputText" editable="false" borderThickness="1" height="75%" width="100%" backgroundColor="#FAF6E2" fontFamily="Consolas" fontSize="12" color="#003344" borderColor="#B7BABC">
                </mx:TextArea>
                <mx:HBox width="100%" height="25%">
                    <mx:TextArea text="(a|b)*abb" id="inputText" width="100%" height="100%" backgroundColor="#FAF1C3" fontFamily="Consolas" fontSize="12" color="#003344">
                    </mx:TextArea>
                    <mx:VBox height="100%" width="120" verticalAlign="middle">
                        <mx:Button label="Clean" id="clsBt" click="clsBt_clickHandler(event)"  width="100%"/>    
                        <!--<mx:Button label="Extends" id="execBt" click="execBt_clickHandler(event)"  width="100%"/>    
                        <mx:Button label="Shunting-yard" id="shuntBt" click="shuntBt_clickHandler(event)"  width="100%"/>  -->  
                        <mx:Button label="Compile" id="compileBt" click="compileBt_clickHandler(event)"  width="100%"/>  
                        <mx:Button label="Thompson" id="nfaBt" click="nfaBt_clickHandler(event)"  width="100%"/>    
                        <mx:Button label="Dfa" id="dfaBt" click="dfaBt_clickHandler(event)"  width="100%"/>    
                        <mx:Button label="MiniDfa" id="minidfaBt" click="minidfaBt_clickHandler(event)"  width="100%"/>    
                        <mx:Button label="LexDfa" id="lexdfaBt" click="lexdfaBt_clickHandler(event)"  width="100%"/>    
                    </mx:VBox>
                </mx:HBox>
            </mx:VBox>
        </mx:ViewStack>
    </mx:VBox>
</mx:Application>
