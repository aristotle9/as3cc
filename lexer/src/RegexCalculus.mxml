<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
                xmlns:mx="library://ns.adobe.com/flex/mx" layout="absolute" minWidth="300" minHeight="200" creationComplete="application1_creationCompleteHandler(event)" creationPolicy="all" xmlns:editor="org.lala.ui.editor.*">
    <fx:Metadata>
        [SWF(width="800",height="700")]
    </fx:Metadata>
    <fx:Script>
        <![CDATA[
            import com.maccherone.json.JSON;
            
            import mx.events.FlexEvent;
            import mx.utils.StringUtil;
            
            import org.lala.lex.interfaces.IInput;
            import org.lala.lex.interfaces.IInputSet;
            import org.lala.lex.interfaces.INFA;
            import org.lala.lex.nfa.InputSet;
            import org.lala.lex.utils.NFAUtil;
            import org.lala.lex.utils.RegToken;
            import org.lala.lex.utils.RegexUtil;
            
            import test.Lexer;
            public const lex:Lexer = new Lexer();
            protected function execBt_clickHandler(event:MouseEvent):void
            {
                log(RegexUtil.lex_with_extends(inputText.text));
            }
            
            protected function log(... args):void
            {
                outputText.text += args.join("") + "\n";
            }

            protected function shuntBt_clickHandler(event:MouseEvent):void
            {
                log(RegexUtil.shunting_yard(RegexUtil.lex_with_extends(inputText.text)));
            }

            protected function nfaBt_clickHandler(event:MouseEvent):void
            {
                var tokens:Vector.<RegToken> = RegexUtil.lex_with_extends(inputText.text);
                var rpn:Vector.<RegToken> = RegexUtil.shunting_yard(tokens);
                var nfa:INFA = RegexUtil.reg_nfa(rpn);
                NFAUtil.reindex_nfa(nfa);
                log(RegexUtil.nfa_dot(nfa));
            }

            protected function clsBt_clickHandler(event:MouseEvent):void
            {
                outputText.text = "";
            }


            protected function dfaBt_clickHandler(event:MouseEvent):void
            {
                var tokens:Vector.<RegToken> = RegexUtil.lex_with_extends(inputText.text);
                var rpn:Vector.<RegToken> = RegexUtil.shunting_yard(tokens);
                var nfa:INFA = RegexUtil.reg_nfa(rpn);
                NFAUtil.reindex_nfa(nfa);
                nfa = NFAUtil.subset_construction(nfa);
                log(RegexUtil.dfa_of_nfa_dot(nfa));
            }

            protected function minidfaBt_clickHandler(event:MouseEvent):void
            {
                var tokens:Vector.<RegToken> = RegexUtil.lex_with_extends(inputText.text);
                var rpn:Vector.<RegToken> = RegexUtil.shunting_yard(tokens);
                var nfa:INFA = RegexUtil.reg_nfa(rpn);
                NFAUtil.reindex_nfa(nfa);
                nfa = NFAUtil.subset_construction(nfa);
                nfa = NFAUtil.min_dfa(nfa);
                log(RegexUtil.nfa_dot(nfa));
            }
            
            protected function gen_lexer_test():void
            {
                return;//配置格式更改,下列配置方式已經失效
                var nfa:INFA;
                var states:Object = {
                    inclusive:"state1 state2 state3",
                    exclusive:"state4 state5 state6"
                };
                var data:Array = [
                    // \ 本身\\\\ * \\*
//                    {pattern:'[ \\t\\r\\n]+|(//|#)[^\\r\\n]*[\\r\\n]*|/\\*([^\\*]+\\*|\\*)([^\\*/][^\\*]*\\*|\\*)*/'},
                    {states:"state1 state2", pattern:'true|false', action:"return 'bool';"},
                    {states:"state4 state5", pattern:"[1-9]\\d*|0", action:"return 'int';"},
                    {pattern:"0[0-7]+", action:"return 'oct';"},
                    {pattern:"0x[\\da-f]+", action:"return 'hex';"},
                    {pattern:"\\d*\\.\\d+", action:"return 'float';"}
//                    {pattern:"[a-zA-Z_$@][\\w_$@]*", action:"return 'id';"},
//                    {pattern:'\'([^\'\\\\]|\\\\.)*\'|\"([^\"\\\\]|\\\\.)*\"', action:"return 'str';"}
                ];
                nfa = RegexUtil.CREATE_NFA(data, 0, 0xff, states);
//                log(RegexUtil.nfa_dot(nfa));
//                return;
                nfa = RegexUtil.NFA_DFA(nfa);
//                log(RegexUtil.nfa_dot(nfa));
//                return;
                nfa = NFAUtil.min_dfa(nfa, true);
                var tb:Array = RegexUtil.DFA_TABLE(nfa); 
                var r:Array = RegexUtil.INPUT_COMPRESS(tb);
                var f:Array = RegexUtil.FINAL_STATES(nfa);
                var iptTable:Array = r[1];
                /** 设置映射表 **/
                nfa.inputSet.every(function(ipt:IInput):Boolean
                {
                    if(ipt != InputSet.E)
                    {
                        ipt.compressed = iptTable[ipt.id];
                    }
                    return false;
                });
                log(RegexUtil.nfa_dot(nfa));
//                log(RegexUtil.PRETTY_PRINT(r[0], f, nfa.inputSet.inputTable()));
//                lex.stateTrans = r[0];
//                lex.finalIndices = f;
//                lex.inputTrans = nfa.inputSet.inputTable(); 
            }

            protected function testBt_clickHandler(event:MouseEvent):void
            {
                lex.source = testInputText.text;
                var tk:String = lex.token;
                var result:Array = [];
                while(tk != "<$>")
                {
                    result.push(tk);
                    lex.advance();
                    tk = lex.token;
                }
                result.push(tk);
                testOutputText.text += JSON.encode(result, true);
            }
            protected var bta:ByteArray;
            protected var config:Object;
            protected function loadFileBt_clickHandler(event:MouseEvent):void
            {
                var fileRef:FileReference = new FileReference();
                fileRef.addEventListener(Event.SELECT, function(event:Event):void
                {
                    fileRef.load();
                });
                fileRef.addEventListener(Event.COMPLETE, function(event:Event):void
                {
                    var result0:Object = RegexUtil.PARSE_LEXER_SOURCE(new XML(fileRef.data));
                    config = result0;
                    var nfa:INFA;
                    nfa = RegexUtil.CREATE_NFA(result0.lexer.rules,0,0xffff, result0.lexer.states);
                    nfa = RegexUtil.NFA_DFA(nfa);
                    nfa = NFAUtil.min_dfa(nfa, true);
                    var stateTable:Array = RegexUtil.DFA_TABLE(nfa); 
                    var result1:Array = RegexUtil.INPUT_COMPRESS(stateTable);
                    var finalStates:Array = RegexUtil.FINAL_STATES(nfa);
                    var inputTable:Array = result1[1];
                    /** 设置映射表 **/
                    nfa.inputSet.every(function(ipt:IInput):Boolean
                    {
                        if(ipt != InputSet.E)
                        {
                            ipt.compressed = inputTable[ipt.id];
                        }
                        return false;
                    });
                    var statesInputTable:Object = RegexUtil.DFA_INPUT_STATES(nfa);
                    bta = RegexUtil.TABLES_COMPRESS(result1[0], finalStates, nfa.inputSet.inputTable(), statesInputTable);
                    testOutputText.text += "ok.\n";
//                    log(JSON.encode(statesInputTable, true));
//                    log(RegexUtil.PRETTY_PRINT(result1[0], finalStates, nfa.inputSet.inputTable()));
                    /** 测试使用词法分割器 **/
                    //已经无法实时测试了,因为使用了return 语句;
//                    lex.stateTrans = result1[0];
//                    lex.finalIndices = finalStates;
//                    lex.inputTrans = nfa.inputSet.inputTable();
//                    lex.statesInputTable = statesInputTable;
                });
                fileRef.browse([new FileFilter("xml","*.xml")]);
            }

            protected function saveFileBt_clickHandler(event:MouseEvent):void
            {
                var fileRef:FileReference = new FileReference();
                fileRef.save(bta,"lexerData.dat");
            }

            protected function saveActionBt_clickHandler(event:MouseEvent):void
            {
                var fileRef:FileReference = new FileReference;
                fileRef.save(RegexUtil.ACTION_FILE(config), "lexerActions.txt");
            }

            protected function application1_creationCompleteHandler(event:FlexEvent):void
            {
                viewChanges.selectedIndex = 0;
            }


            protected function lexdfaBt_clickHandler(event:MouseEvent):void
            {
                gen_lexer_test();
            }

        ]]>
    </fx:Script>
    <mx:VBox width="100%" height="100%">
        <mx:HBox width="100%" height="23" horizontalAlign="center" verticalAlign="middle">
            <mx:ButtonBar id="viewChanges" height="100%">
                <mx:dataProvider>
                    <fx:Array>
                        <fx:String>LexerGenerator</fx:String>
                        <fx:String>RegularExpression</fx:String>
                    </fx:Array>
                </mx:dataProvider>                
            </mx:ButtonBar>
        </mx:HBox>
        <mx:ViewStack id="viewPanels" selectedIndex="{viewChanges.selectedIndex}" width="100%" height="100%">
            <mx:VBox width="100%" height="100%">
                <mx:HBox width="100%" height="23" verticalAlign="middle" horizontalAlign="center">
                    <mx:Button id="loadFileBt" label="LoadSource" click="loadFileBt_clickHandler(event)" width="95" height="100%" />
                    <mx:Button id="saveFileBt" label="SaveResult" click="saveFileBt_clickHandler(event)" width="95" height="100%" />
                    <mx:Button id="saveActionBt" label="SaveAction" click="saveActionBt_clickHandler(event)" width="95" height="100%" />
                    <!--<mx:Button label="LexTest" id="testBt" click="testBt_clickHandler(event)" height="100%" width="95"/>-->    
                    <mx:Button label="CleanTest" id="testCleanBt" click="testOutputText.text=''" height="100%" width="95"/>    
                </mx:HBox>
                <editor:HighlightEditor id="testInputText" height="85%" width="100%">
                </editor:HighlightEditor>
                <mx:TextArea id="testOutputText" height="15%" width="100%" backgroundColor="#EEEED1" fontFamily="Consolas" fontSize="12" editable="false" borderThickness="1" color="#003344" borderColor="#B7BABC">
                </mx:TextArea>
            </mx:VBox>
            <mx:VBox width="100%" height="100%">
                <mx:TextArea id="outputText" editable="false" borderThickness="1" height="50%" width="100%" backgroundColor="#EEEED1" fontFamily="Consolas" fontSize="12" color="#003344" borderColor="#B7BABC">
                </mx:TextArea>
                <mx:HBox width="100%" height="50%">
                    <mx:TextArea text="(a|b)*abb" id="inputText" width="100%" height="100%" backgroundColor="#FFFFE1" fontFamily="Consolas" fontSize="12" color="#003344">
                    </mx:TextArea>
                    <mx:VBox height="100%" width="120" verticalAlign="middle">
                        <mx:Button label="Clean" id="clsBt" click="clsBt_clickHandler(event)"  width="100%"/>    
                        <mx:Button label="Extends" id="execBt" click="execBt_clickHandler(event)"  width="100%"/>    
                        <mx:Button label="Shunting-yard" id="shuntBt" click="shuntBt_clickHandler(event)"  width="100%"/>    
                        <mx:Button label="Thompson" id="nfaBt" click="nfaBt_clickHandler(event)"  width="100%"/>    
                        <mx:Button label="Dfa" id="dfaBt" click="dfaBt_clickHandler(event)"  width="100%"/>    
                        <mx:Button label="MiniDfa" id="minidfaBt" click="minidfaBt_clickHandler(event)"  width="100%"/>    
                        <mx:Button label="LexDfa" id="lexdfaBt" click="lexdfaBt_clickHandler(event)"  width="100%"/>    
                    </mx:VBox>
                </mx:HBox>
            </mx:VBox>
        </mx:ViewStack>
    </mx:VBox>
</mx:Application>
